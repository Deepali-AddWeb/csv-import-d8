<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Image\Image;
use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\Unicode;

/**
 * Implements hook_entity_create().
 */
function transform_uploaded_image_entity_create(EntityInterface $entity) {
  // Transform only files.
  if ($entity->getEntityTypeId() != 'file') {
    return;
  }

  // Check that transforming for images is enabled.
  $config = \Drupal::config('transform_uploaded_image.settings');
  if (!$config->get('enabled')) {
    return;
  }

  // Create object of the image.
  $uri = $entity->get('uri')->getString();
  $it_manager = \Drupal::service('image.toolkit.manager');
  $toolkit = $it_manager->getDefaultToolkit();
  $image = new Image($toolkit, $uri);

  // Load image styles and apply effects.
  $cases = unserialize($config->get('cases'));
  if (empty($cases)) {
    return;
  }

  // Apply cases one by one.
  foreach ($cases as $case) {
    // Compare file types by mime types.
    $extension_fits_to_mime = FALSE;
    $extensions = str_replace(' ', ', ', $case['extensions']);
    foreach (explode(',', $extensions) as $extension) {
      if (responsive_image_get_mime_type(RESPONSIVE_IMAGE_ORIGINAL_IMAGE, $extension) == $image->getMimeType()) {
        $extension_fits_to_mime = TRUE;
        break;
      }
    }

    // Skip if extension doesn't fits to mime.
    if (!$extension_fits_to_mime) {
      continue;
    }

    foreach ($case['styles'] as $style_option => $is_enabled) {
      // If style is enabled in settings.
      if ($is_enabled) {
        // Cut prefix 'style_', added by this module.
        $image_style_id = Unicode::substr($style_option, 6, Unicode::strlen($style_option) - 6);
        // Load style and apply effects.
        if ($image_style = ImageStyle::load($image_style_id)) {
          $effects = $image_style->getEffects();
          foreach ($effects as $effect) {
            $effect->applyEffect($image);
          }
        }
      }
    }
  }

  // Save transformed image.
  $image->save($uri);
}